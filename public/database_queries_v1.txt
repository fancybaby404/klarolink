-- =====================
-- 1. CORE & COMPATIBILITY TABLES
-- =====================
CREATE TABLE businesses (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    profile_image TEXT,
    slug VARCHAR(255) UNIQUE NOT NULL,
    location TEXT,
    background_type VARCHAR(50) DEFAULT 'color',
    background_value VARCHAR(50) DEFAULT '#CC79F0',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE INDEX idx_businesses_slug ON businesses(slug);
CREATE INDEX idx_businesses_email ON businesses(email);

CREATE TABLE feedback_forms (
    id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    title TEXT NOT NULL DEFAULT 'Feedback Form',
    description TEXT,
    fields JSONB NOT NULL DEFAULT '[]',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
CREATE INDEX idx_feedback_forms_business_id ON feedback_forms(business_id);

CREATE TABLE social_links (
    id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    platform VARCHAR(100) NOT NULL,
    url TEXT NOT NULL,
    display_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE INDEX idx_social_links_business_id ON social_links(business_id);

CREATE TABLE feedback_submissions (
    id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    form_id INT NOT NULL REFERENCES feedback_forms(id) ON DELETE CASCADE,
    submission_data JSONB NOT NULL,
    submitted_at TIMESTAMP DEFAULT NOW(),
    ip_address TEXT,
    user_agent TEXT
);
CREATE INDEX idx_feedback_submissions_business_id ON feedback_submissions(business_id);
CREATE INDEX idx_feedback_submissions_form_id ON feedback_submissions(form_id);

CREATE TABLE analytics_events (
    id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    event_type VARCHAR(100) NOT NULL,
    event_data JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    ip_address TEXT,
    user_agent TEXT
);
CREATE INDEX idx_analytics_events_business_id ON analytics_events(business_id);
CREATE INDEX idx_analytics_events_event_type ON analytics_events(event_type);

-- =====================
-- 2. CORE ENTITIES
-- =====================
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id) ON DELETE CASCADE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id) ON DELETE CASCADE,
    first_name VARCHAR(100) NOT NULL,
    middle_name VARCHAR(100),
    last_name VARCHAR(100) NOT NULL,
    suffix VARCHAR(20),
    age INT,
    address TEXT,
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(50),
    emergency_contact JSONB,
    company_id VARCHAR(50) UNIQUE,
    insurance_num VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price NUMERIC(10,2)
);

CREATE TABLE supplier_profiles (
    supplier_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    contact_info JSONB
);

-- =====================
-- 3. CRM MODULE
-- =====================
CREATE TABLE contact_history (
    contact_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id) ON DELETE CASCADE,
    contact_date TIMESTAMP DEFAULT NOW(),
    details TEXT
);

CREATE TABLE sales_leads (
    lead_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id) ON DELETE SET NULL,
    source VARCHAR(100),
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE opportunities (
    opportunity_id SERIAL PRIMARY KEY,
    lead_id INT REFERENCES sales_leads(lead_id) ON DELETE CASCADE,
    description TEXT,
    value NUMERIC(12,2),
    stage VARCHAR(50)
);

CREATE TABLE quotation_history (
    quotation_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    product_id INT REFERENCES products(product_id),
    price NUMERIC(10,2),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE product_pricing (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    base_price NUMERIC(10,2),
    currency VARCHAR(10)
);

CREATE TABLE sales_orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    order_date DATE,
    total_amount NUMERIC(12,2)
);

CREATE TABLE after_sales_tickets (
    ticket_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    issue_description TEXT,
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE service_requests (
    request_id SERIAL PRIMARY KEY,
    ticket_id INT REFERENCES after_sales_tickets(ticket_id) ON DELETE CASCADE,
    request_type VARCHAR(255),
    status VARCHAR(50)
);

CREATE TABLE user_feedback (
    feedback_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    feedback_text TEXT,
    rating INT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- =====================
-- 4. MANUFACTURING MODULE
-- =====================
CREATE TABLE materials (
    material_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT
);

CREATE TABLE bill_of_materials (
    bom_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id) ON DELETE CASCADE,
    material_id INT REFERENCES materials(material_id),
    quantity NUMERIC(10,2)
);

CREATE TABLE production_planning (
    plan_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id),
    planned_date DATE,
    shipping_date DATE,
    quantity INT
);

CREATE TABLE work_orders (
    work_order_id SERIAL PRIMARY KEY,
    plan_id INT REFERENCES production_planning(plan_id),
    assigned_worker INT REFERENCES employees(employee_id),
    status VARCHAR(50)
);

CREATE TABLE quality_control (
    qc_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id),
    check_date DATE,
    status VARCHAR(50),
    notes TEXT
);

-- =====================
-- 5. PROJECT MANAGEMENT
-- =====================
CREATE TABLE projects (
    project_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id),
    name VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    budget NUMERIC(12,2)
);

CREATE TABLE tasks (
    task_id SERIAL PRIMARY KEY,
    project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,
    name VARCHAR(255),
    assigned_to INT REFERENCES employees(employee_id),
    due_date DATE,
    status VARCHAR(50)
);

CREATE TABLE resource_allocation (
    allocation_id SERIAL PRIMARY KEY,
    project_id INT REFERENCES projects(project_id),
    employee_id INT REFERENCES employees(employee_id),
    role VARCHAR(100)
);

CREATE TABLE budget_cost_tracking (
    cost_id SERIAL PRIMARY KEY,
    project_id INT REFERENCES projects(project_id),
    description TEXT,
    amount NUMERIC(12,2)
);

CREATE TABLE expense_logs (
    expense_id SERIAL PRIMARY KEY,
    project_id INT REFERENCES projects(project_id),
    description TEXT,
    amount NUMERIC(12,2),
    date_logged DATE
);

CREATE TABLE time_tracking (
    time_id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees(employee_id),
    project_id INT REFERENCES projects(project_id),
    hours_worked NUMERIC(5,2),
    date_logged DATE
);

-- =====================
-- 6. PROCUREMENT & INVENTORY
-- =====================
CREATE TABLE supplier_contracts (
    contract_id SERIAL PRIMARY KEY,
    supplier_id INT REFERENCES supplier_profiles(supplier_id),
    details TEXT
);

CREATE TABLE purchase_orders (
    po_id SERIAL PRIMARY KEY,
    supplier_id INT REFERENCES supplier_profiles(supplier_id),
    order_date DATE,
    total_cost NUMERIC(12,2)
);

CREATE TABLE inventory_records (
    inventory_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id),
    quantity INT,
    location VARCHAR(255)
);

-- =====================
-- 7. FINANCE MODULE
-- =====================
CREATE TABLE general_ledger (
    entry_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id),
    description TEXT,
    amount NUMERIC(12,2),
    entry_date DATE
);

CREATE TABLE accounts_payable (
    ap_id SERIAL PRIMARY KEY,
    supplier_id INT REFERENCES supplier_profiles(supplier_id),
    amount NUMERIC(12,2),
    due_date DATE
);

CREATE TABLE accounts_receivable (
    ar_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    amount NUMERIC(12,2),
    due_date DATE
);

CREATE TABLE financial_reports (
    report_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id),
    name VARCHAR(255),
    report_date DATE,
    file_url TEXT
);

-- =====================
-- 8. HR MODULE
-- =====================
CREATE TABLE employee_salary (
    salary_id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees(employee_id),
    job_title VARCHAR(255),
    hourly_rate NUMERIC(10,2)
);

CREATE TABLE employee_benefits (
    benefit_id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees(employee_id),
    benefit_type VARCHAR(100),
    amount NUMERIC(10,2)
);

CREATE TABLE attendance (
    attendance_id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees(employee_id),
    time_in TIMESTAMP,
    time_out TIMESTAMP
);

CREATE TABLE job_board (
    job_id SERIAL PRIMARY KEY,
    title VARCHAR(255),
    description TEXT,
    status VARCHAR(50)
);

CREATE TABLE applications (
    application_id SERIAL PRIMARY KEY,
    job_id INT REFERENCES job_board(job_id),
    applicant_name VARCHAR(255),
    resume_url TEXT,
    status VARCHAR(50)
);

CREATE TABLE training_schedule (
    training_id SERIAL PRIMARY KEY,
    business_id INT REFERENCES businesses(id),
    topic VARCHAR(255),
    date DATE
);

-- =====================
-- 9. COMPLIANCE MODULE
-- =====================
CREATE TABLE regulations (
    regulation_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    dept_responsible VARCHAR(255),
    last_accessed_date DATE,
    next_review_date DATE
);

CREATE TABLE audits (
    audit_id SERIAL PRIMARY KEY,
    audit_name VARCHAR(255),
    dept_audited VARCHAR(255),
    auditor VARCHAR(255),
    audit_date DATE,
    status VARCHAR(50)
);

CREATE TABLE risks (
    risk_id SERIAL PRIMARY KEY,
    risk_title VARCHAR(255),
    dept VARCHAR(255),
    risk_level VARCHAR(50),
    review_date DATE,
    risk_owner VARCHAR(255)
);

CREATE TABLE policy_documents (
    document_id SERIAL PRIMARY KEY,
    document_name VARCHAR(255),
    owner_dept VARCHAR(255),
    approval_status VARCHAR(50),
    effective_date DATE
);

CREATE TABLE incidents (
    incident_id SERIAL PRIMARY KEY,
    incident_type VARCHAR(255),
    date_reported DATE,
    status VARCHAR(50),
    severity_level VARCHAR(50)
);
